(* -*- tuareg -*- *)
#require "unix"

let version =
  let ic = open_in "../VERSION" in
  let version = input_line ic in
  close_in ic;
  version

let flags = function
  | [] -> ""
  | pkgs ->
    let cmd = "ocamlfind ocamlc -verbose" ^ (
        List.fold_left (fun acc pkg -> acc ^ " -package " ^ pkg) "" pkgs
      ) in
    let ic = Unix.open_process_in
        (cmd ^ " | grep -oEe '-ppx (\"([^\"\\]|\\.)+\"|\\w+)'")
    in
    let rec go ic acc =
      try go ic (acc ^ " " ^ input_line ic) with End_of_file -> close_in ic; acc
    in
    go ic ""

let flags = flags ["ppx_deriving_rpc"; "ppx_sexp_conv"]

let coverage_rewriter =
  let is_coverage = try Unix.getenv "BISECT_ENABLE" = "YES" with Not_found -> false in
  if is_coverage then
    "(preprocess (pps (bisect_ppx -conditional)))"
  else
    ""

let () = Printf.ksprintf Jbuild_plugin.V1.send {|
(jbuild_version 1)

(rule (
  (targets (version.ml))
  (deps ())
  (action (
    with-stdout-to ${@} (echo "let version = \"%s\"\n")
  ))
))

(library (
  (name xenopsd)
  (public_name xapi-xenopsd)
  (wrapped false)
  (flags (:standard -warn-error +a-3 %s))
  %s
  (libraries (
    c_stubs
    stdext
    threads
    threads.posix
    uuidm
    xmlm
    cohttp
    uri
    rpclib
    forkexec
    fd-send-recv
    xcp
    xcp.xen
    xcp.storage
    xcp.updates
    sexplib
    ppx_sexp_conv
    uutf
    xenstore
    xenstore.unix
    xenstore_transport
    xenstore_transport.unix
     core
  ))
))
|} version flags coverage_rewriter
